{
  "hash": "1f3107d010e91b90f3730422467be073",
  "result": {
    "markdown": "---\ntitle: \"Data Acquistion\"\nauthor: \"Muhammad Shamookh\"\ndate: \"2024-05\"\noutput:\n  html_document:\n    toc: true\n    toc_float: true\n    df_print: paged\n    collapsed: false\n    number_sections: true\n    toc_depth: 3\n    code_folding: hide\n---\n\n\n# Data Acquisition\n\nLast compiled: 2024-05-18\n\n# Challenge No. 01\nThe Spotify Web API provides access to various endpoints to retrieve data related to music tracks, artists, albums, playlists, and user profiles. The top 5 most popular tracks on Spotify are retreived.\n\n## Spotify API\n\n::: {.cell hash='02_data_acquisition_cache/html/unnamed-chunk-1_b5abd0da0ced9eb899a40afb1a9a1940'}\n\n```{.r .cell-code}\n# Load required libraries\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(tidyverse)\n\n# Replace with your actual OAuth token\ntoken <- 'BQBcTINcgYgaqH7etCs9vm5X2nKxc2zADfqQbwAP2tnmljk7XthJfaaqKDw4rWFN6cspyISpo7JyQiGIvETRqZ-szLLhyOGp--e_gnzER5RthEDfjtNAUedH8Vf0F8YuEKXCE5wXmfzfXnrItCrxzZIR29-pGlbyPBZHrHsJq1LPAEkUemWZ95ABVoCYlGWTd10EqzocX8zAwcIhtWIrvVDHX4-3SRBMjO-O4QiBMF94f42TSPKp068At2-MuZ0c7SMvbWBaeO3g-0Wt8qT4rvSgPyyn'\n\n# Function to make API request\nfetch_web_api <- function(endpoint, method = \"GET\", body = NULL) {\n  url <- paste0(\"https://api.spotify.com/\", endpoint)\n  \n  res <- httr::VERB(\n    method,\n    url,\n    add_headers(Authorization = paste(\"Bearer\", token)),\n    body = body,\n    encode = \"json\"\n  )\n  \n  if (status_code(res) == 200) {\n    return(content(res, as = \"parsed\", type = \"application/json\"))\n  } else {\n    stop(\"API request failed with status code: \", status_code(res))\n  }\n}\n\n# Function to get top tracks\nget_top_tracks <- function() {\n  endpoint <- \"v1/me/top/tracks?time_range=long_term&limit=5\"\n  response <- fetch_web_api(endpoint)\n  return(response$items)\n}\n\n# Get top tracks\ntop_tracks <- get_top_tracks()\n\n# Process and print the data in a readable format\ntrack_info <- top_tracks %>%\n  map_df(~ data.frame(\n    track_name = .x$name,\n    artist_names = paste(map_chr(.x$artists, \"name\"), collapse = \", \"),\n    stringsAsFactors = FALSE\n  ))\n\nprint(track_info)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>                                     track_name\n#> 1                     Saari Duniya Jalaa Denge\n#> 2                     Ishq - From \"Lost;Found\"\n#> 3 O Bedardeya (From \"Tu Jhoothi Main Makkaar\")\n#> 4     Saari Duniya Jalaa Denge (From \"Animal\")\n#> 5                                  Sufi Medley\n#>                                 artist_names\n#> 1                             Jaani, B Praak\n#> 2              Faheem Abdullah, Rauhan Malik\n#> 3 Pritam, Arijit Singh, Amitabh Bhattacharya\n#> 4                                    B Praak\n#> 5                           Abdullah Qureshi\n```\n:::\n\n```{.r .cell-code}\n# Display as a table\nlibrary(knitr)\nkable(track_info, format = \"markdown\")\n```\n\n::: {.cell-output-display}\n|track_name                                   |artist_names                               |\n|:--------------------------------------------|:------------------------------------------|\n|Saari Duniya Jalaa Denge                     |Jaani, B Praak                             |\n|Ishq - From \"Lost;Found\"                     |Faheem Abdullah, Rauhan Malik              |\n|O Bedardeya (From \"Tu Jhoothi Main Makkaar\") |Pritam, Arijit Singh, Amitabh Bhattacharya |\n|Saari Duniya Jalaa Denge (From \"Animal\")     |B Praak                                    |\n|Sufi Medley                                  |Abdullah Qureshi                           |\n:::\n:::\n\n 1: Top 5 track and singer names.\n\n\n# Challenge No. 02\nWeb scraping is a technique used to extract data from websites. In this example, we will scrape the mountain bikes listed on the Rose Bikes website <https://www.rosebikes.com/bikes/mtb>. The goal is to extract information such as the bike name, price, and other relevant details.\n\n## Rosebike\n\n\n::: {.cell hash='02_data_acquisition_cache/html/unnamed-chunk-2_5bfaff220fd726e418c16be4ad2bbadd'}\n\n```{.r .cell-code}\nlibrary(tidyverse) # Main Package - Loads dplyr, purrr, etc.\nlibrary(rvest)     # HTML Hacking & Web Scraping\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attaching package: 'rvest'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> The following object is masked from 'package:readr':\n#> \n#>     guess_encoding\n```\n:::\n\n```{.r .cell-code}\nlibrary(xopen)     # Quickly opening URLs\nlibrary(jsonlite)  # converts JSON files to R objects\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attaching package: 'jsonlite'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> The following object is masked from 'package:purrr':\n#> \n#>     flatten\n```\n:::\n\n```{.r .cell-code}\nlibrary(glue)      # concatenate strings\nlibrary(stringi)   # character string/text processing\nlibrary(purrr)\n\nextract_price <- function(text) {\n  price_str <- str_extract(text, \"[0-9]*,*[0-9]*\\\\.[0-9]*\")\n  price_str <- gsub(\",\", \"\", as.character(price_str))\n  return(price_str)\n}\n\nmake_url <- function(my_string){\n  base_url <- \"https://www.rosebikes.com\"\n  glue(\"{base_url}{my_string}\")\n}\n\n#all model names have numbers in them\nfilter_model_names <- function(model_name) {\n  condition1 <- str_detect(model_name, \"[0-9]\")\n  condition2 <- str_detect(model_name, \"SOUL FIRE\")\n  if (condition1 | condition2) {\n    return(model_name)\n  }\n  return(NULL)\n}\n\nextract_models <- function(model_url) {\n  \n  css_class_model_name <- \".basic-headline__title\"\n  # This part extracts the model names\n  html_model_names <- read_html(model_url) %>%\n    html_nodes(css = css_class_model_name) %>%\n    map(html_text) %>%\n    map(filter_model_names)\n  model_names <- unique(unlist(html_model_names))\n  \n  \n  #This parts extracts the model price\n  css_class_model_price = \".catalog-category-model__price-current-value\"\n  model_prices <- read_html(model_url) %>%\n    html_nodes(css = css_class_model_price) %>%\n    map(html_text) %>%\n    map(extract_price)\n  \n  #The last prices are the prices of the models\n  while (length(model_prices) > length(model_names)) {\n    model_prices[1] <- NULL\n  }\n  model_prices <- model_prices %>%\n    unlist() %>%\n    as.double()\n  \n  models_tbl <- tibble(model_names, model_prices)\n  \n}\n\n\nextract_models_from_category_list_mtb <- function(bike_url){\n  \n  bike_price_xml_path = \"catalog-category-bikes__price-title\"\n  category <- str_extract(bike_url, \"(?<=/)[a-z]*$\")\n  css_class <- \".catalog-category-bikes__button\"\n  \n  html_bike <- read_html(bike_url)\n  \n  html_models_urls <- html_bike %>%\n    html_nodes(css = css_class) %>%\n    html_attr(\"href\") %>%\n    map(make_url)\n  \n  models_in_category_list <- map(html_models_urls, extract_models)\n  models_in_category_list\n  models_in_category_tbl <- models_in_category_list[[1]]\n  for (i in 2:length(models_in_category_list)) {\n    models_in_category_tbl <- add_row(models_in_category_tbl, \n                                      model_names = models_in_category_list[[i]]$model_names,\n                                      model_prices = models_in_category_list[[i]]$model_prices)\n  }\n  \n  category = rep(category, times = length(models_in_category_tbl$model_names))\n  models_in_category_tbl$category <- category\n  return(models_in_category_tbl)\n}\n\n\n\nhome_url <- \"https://www.rosebikes.com/bikes\"\n\nhtml_home <- read_html(home_url)\nhtml_categories_urls <- html_home %>%\n  html_nodes(css = \".catalog-navigation__link\") %>%\n  html_attr(\"href\") %>%\n  map(make_url)\n\n\ntbl <- html_categories_urls[[1]] %>%\n  extract_models_from_category_list_mtb\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Unknown or uninitialised column: `model_names`.\n#> Unknown or uninitialised column: `model_names`.\n```\n:::\n\n```{.r .cell-code}\ntbl \n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"model_names\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"model_prices\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"category\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"BACKROAD AL APEX XPLR 1x12\",\"2\":\"1999\",\"3\":\"gravel\"},{\"1\":\"BACKROAD AL GRX RX610 1x12\",\"2\":\"2299\",\"3\":\"gravel\"},{\"1\":\"BACKROAD AL GRX RX810 1x11\",\"2\":\"2399\",\"3\":\"gravel\"},{\"1\":\"BACKROAD AL GRX RX400\",\"2\":\"2499\",\"3\":\"gravel\"},{\"1\":\"BACKROAD AL GRX RX600\",\"2\":\"2499\",\"3\":\"gravel\"},{\"1\":\"With 14 mounting points, the BACKROAD can carry everything you need for a few days away from your usual surroundings.\",\"2\":\"2999\",\"3\":\"gravel\"},{\"1\":\"BACKROAD GRX RX820 1x12\",\"2\":\"3099\",\"3\":\"gravel\"},{\"1\":\"BACKROAD APEX AXS XPLR 1x12\",\"2\":\"3299\",\"3\":\"gravel\"},{\"1\":\"BACKROAD Force AXS XPLR 1x12\",\"2\":\"3299\",\"3\":\"gravel\"},{\"1\":\"BACKROAD GRX RX820\",\"2\":\"4499\",\"3\":\"gravel\"},{\"1\":\"BACKROAD CLASSIFIED 2x11\",\"2\":\"4499\",\"3\":\"gravel\"},{\"1\":\"BACKROAD GRX810 FLATBAR\",\"2\":\"4899\",\"3\":\"gravel\"},{\"1\":\"Varied â€“ even at over 170 bpm\",\"2\":\"3499\",\"3\":\"gravel\"},{\"1\":\"The GC50 wheels were specially developed for the BACKROAD FF and tested in the virtual wind tunnel. While the rear wheel is trimmed for lightweight construction, the wider front wheel profile noticeably improves aerodynamics.\",\"2\":\"4999\",\"3\":\"gravel\"},{\"1\":\"BACKROAD GRX RX820 1x12\",\"2\":\"3099\",\"3\":\"gravel\"},{\"1\":\"BACKROAD GRX RX820\",\"2\":\"3299\",\"3\":\"gravel\"},{\"1\":\"BACKROAD APEX AXS XPLR 1x12\",\"2\":\"4499\",\"3\":\"gravel\"},{\"1\":\"BACKROAD CLASSIFIED 2x11\",\"2\":\"4499\",\"3\":\"gravel\"},{\"1\":\"BACKROAD Force AXS XPLR 1x12\",\"2\":\"4899\",\"3\":\"gravel\"},{\"1\":\"HOBO GRX 810\",\"2\":\"2499\",\"3\":\"gravel\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\nTable 2: Model names and Model prices (Prices are in Euro)\n\n\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}