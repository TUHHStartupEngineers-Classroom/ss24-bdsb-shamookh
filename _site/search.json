[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#first-test-codefunction",
    "href": "index.html#first-test-codefunction",
    "title": "My Lab Journal",
    "section": "First Test Code/Function",
    "text": "First Test Code/Function\nroll3 &lt;- function(faces = 1:6, number_of_dice = 1) {\ndice &lt;- sample(x = faces, size = number_of_dice,\n             replace = TRUE, \n             \n             \n             prob = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.5))\n             \n             \nsum(dice)\n}"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquistion",
    "section": "",
    "text": "Last compiled: 2024-05-18"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html#spotify-api",
    "href": "content/01_journal/02_data_acquisition.html#spotify-api",
    "title": "Data Acquistion",
    "section": "\n2.1 Spotify API",
    "text": "2.1 Spotify API\n\n# Load required libraries\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(tidyverse)\n\n# Replace with your actual OAuth token\ntoken &lt;- 'BQBcTINcgYgaqH7etCs9vm5X2nKxc2zADfqQbwAP2tnmljk7XthJfaaqKDw4rWFN6cspyISpo7JyQiGIvETRqZ-szLLhyOGp--e_gnzER5RthEDfjtNAUedH8Vf0F8YuEKXCE5wXmfzfXnrItCrxzZIR29-pGlbyPBZHrHsJq1LPAEkUemWZ95ABVoCYlGWTd10EqzocX8zAwcIhtWIrvVDHX4-3SRBMjO-O4QiBMF94f42TSPKp068At2-MuZ0c7SMvbWBaeO3g-0Wt8qT4rvSgPyyn'\n\n# Function to make API request\nfetch_web_api &lt;- function(endpoint, method = \"GET\", body = NULL) {\n  url &lt;- paste0(\"https://api.spotify.com/\", endpoint)\n  \n  res &lt;- httr::VERB(\n    method,\n    url,\n    add_headers(Authorization = paste(\"Bearer\", token)),\n    body = body,\n    encode = \"json\"\n  )\n  \n  if (status_code(res) == 200) {\n    return(content(res, as = \"parsed\", type = \"application/json\"))\n  } else {\n    stop(\"API request failed with status code: \", status_code(res))\n  }\n}\n\n# Function to get top tracks\nget_top_tracks &lt;- function() {\n  endpoint &lt;- \"v1/me/top/tracks?time_range=long_term&limit=5\"\n  response &lt;- fetch_web_api(endpoint)\n  return(response$items)\n}\n\n# Get top tracks\ntop_tracks &lt;- get_top_tracks()\n\n# Process and print the data in a readable format\ntrack_info &lt;- top_tracks %&gt;%\n  map_df(~ data.frame(\n    track_name = .x$name,\n    artist_names = paste(map_chr(.x$artists, \"name\"), collapse = \", \"),\n    stringsAsFactors = FALSE\n  ))\n\nprint(track_info)\n\n#&gt;                                     track_name\n#&gt; 1                     Saari Duniya Jalaa Denge\n#&gt; 2                     Ishq - From \"Lost;Found\"\n#&gt; 3 O Bedardeya (From \"Tu Jhoothi Main Makkaar\")\n#&gt; 4     Saari Duniya Jalaa Denge (From \"Animal\")\n#&gt; 5                                  Sufi Medley\n#&gt;                                 artist_names\n#&gt; 1                             Jaani, B Praak\n#&gt; 2              Faheem Abdullah, Rauhan Malik\n#&gt; 3 Pritam, Arijit Singh, Amitabh Bhattacharya\n#&gt; 4                                    B Praak\n#&gt; 5                           Abdullah Qureshi\n\n# Display as a table\nlibrary(knitr)\nkable(track_info, format = \"markdown\")\n\n\n\n\n\n\n\ntrack_name\nartist_names\n\n\n\nSaari Duniya Jalaa Denge\nJaani, B Praak\n\n\nIshq - From “Lost;Found”\nFaheem Abdullah, Rauhan Malik\n\n\nO Bedardeya (From “Tu Jhoothi Main Makkaar”)\nPritam, Arijit Singh, Amitabh Bhattacharya\n\n\nSaari Duniya Jalaa Denge (From “Animal”)\nB Praak\n\n\nSufi Medley\nAbdullah Qureshi\n\n\n\n\n\n1: Top 5 track and singer names."
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html#rosebike",
    "href": "content/01_journal/02_data_acquisition.html#rosebike",
    "title": "Data Acquistion",
    "section": "\n3.1 Rosebike",
    "text": "3.1 Rosebike\n\nlibrary(tidyverse) # Main Package - Loads dplyr, purrr, etc.\nlibrary(rvest)     # HTML Hacking & Web Scraping\n\n#&gt; \n#&gt; Attaching package: 'rvest'\n\n\n#&gt; The following object is masked from 'package:readr':\n#&gt; \n#&gt;     guess_encoding\n\nlibrary(xopen)     # Quickly opening URLs\nlibrary(jsonlite)  # converts JSON files to R objects\n\n#&gt; \n#&gt; Attaching package: 'jsonlite'\n\n\n#&gt; The following object is masked from 'package:purrr':\n#&gt; \n#&gt;     flatten\n\nlibrary(glue)      # concatenate strings\nlibrary(stringi)   # character string/text processing\nlibrary(purrr)\n\nextract_price &lt;- function(text) {\n  price_str &lt;- str_extract(text, \"[0-9]*,*[0-9]*\\\\.[0-9]*\")\n  price_str &lt;- gsub(\",\", \"\", as.character(price_str))\n  return(price_str)\n}\n\nmake_url &lt;- function(my_string){\n  base_url &lt;- \"https://www.rosebikes.com\"\n  glue(\"{base_url}{my_string}\")\n}\n\n#all model names have numbers in them\nfilter_model_names &lt;- function(model_name) {\n  condition1 &lt;- str_detect(model_name, \"[0-9]\")\n  condition2 &lt;- str_detect(model_name, \"SOUL FIRE\")\n  if (condition1 | condition2) {\n    return(model_name)\n  }\n  return(NULL)\n}\n\nextract_models &lt;- function(model_url) {\n  \n  css_class_model_name &lt;- \".basic-headline__title\"\n  # This part extracts the model names\n  html_model_names &lt;- read_html(model_url) %&gt;%\n    html_nodes(css = css_class_model_name) %&gt;%\n    map(html_text) %&gt;%\n    map(filter_model_names)\n  model_names &lt;- unique(unlist(html_model_names))\n  \n  \n  #This parts extracts the model price\n  css_class_model_price = \".catalog-category-model__price-current-value\"\n  model_prices &lt;- read_html(model_url) %&gt;%\n    html_nodes(css = css_class_model_price) %&gt;%\n    map(html_text) %&gt;%\n    map(extract_price)\n  \n  #The last prices are the prices of the models\n  while (length(model_prices) &gt; length(model_names)) {\n    model_prices[1] &lt;- NULL\n  }\n  model_prices &lt;- model_prices %&gt;%\n    unlist() %&gt;%\n    as.double()\n  \n  models_tbl &lt;- tibble(model_names, model_prices)\n  \n}\n\n\nextract_models_from_category_list_mtb &lt;- function(bike_url){\n  \n  bike_price_xml_path = \"catalog-category-bikes__price-title\"\n  category &lt;- str_extract(bike_url, \"(?&lt;=/)[a-z]*$\")\n  css_class &lt;- \".catalog-category-bikes__button\"\n  \n  html_bike &lt;- read_html(bike_url)\n  \n  html_models_urls &lt;- html_bike %&gt;%\n    html_nodes(css = css_class) %&gt;%\n    html_attr(\"href\") %&gt;%\n    map(make_url)\n  \n  models_in_category_list &lt;- map(html_models_urls, extract_models)\n  models_in_category_list\n  models_in_category_tbl &lt;- models_in_category_list[[1]]\n  for (i in 2:length(models_in_category_list)) {\n    models_in_category_tbl &lt;- add_row(models_in_category_tbl, \n                                      model_names = models_in_category_list[[i]]$model_names,\n                                      model_prices = models_in_category_list[[i]]$model_prices)\n  }\n  \n  category = rep(category, times = length(models_in_category_tbl$model_names))\n  models_in_category_tbl$category &lt;- category\n  return(models_in_category_tbl)\n}\n\n\n\nhome_url &lt;- \"https://www.rosebikes.com/bikes\"\n\nhtml_home &lt;- read_html(home_url)\nhtml_categories_urls &lt;- html_home %&gt;%\n  html_nodes(css = \".catalog-navigation__link\") %&gt;%\n  html_attr(\"href\") %&gt;%\n  map(make_url)\n\n\ntbl &lt;- html_categories_urls[[1]] %&gt;%\n  extract_models_from_category_list_mtb\n\n#&gt; Warning: Unknown or uninitialised column: `model_names`.\n#&gt; Unknown or uninitialised column: `model_names`.\n\ntbl \n\n\n\n  \n\n\n\nTable 2: Model names and Model prices (Prices are in Euro)"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Last compiled: 2024-05-18\nI learned a lot about the themes in this part."
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html#total-covid-cases---time",
    "href": "content/01_journal/04_data_visualization.html#total-covid-cases---time",
    "title": "Data Visualization",
    "section": "\n2.1 Total covid cases - Time",
    "text": "2.1 Total covid cases - Time\n\n# Load required libraries\nlibrary(tidyverse)\nlibrary(ggrepel)\n\n# Load and preview the data\ncovid_data_tbl &lt;- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n\n#&gt; Rows: 399276 Columns: 67\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr   (4): iso_code, continent, location, tests_units\n#&gt; dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#&gt; date  (1): date\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncovid_data_tbl %&gt;%\n  head(n=5)\n\n\n\n  \n\n\n# Define places to filter\nplaces &lt;- c('Germany', 'France', 'Spain', 'United Kingdom', 'United States')\n\n# Filter the data for selected places\ncovid_data_tbl_selected &lt;- covid_data_tbl %&gt;%\n  filter(location %in% places)\n\n# Get the range of dates\nlast_date &lt;- max(covid_data_tbl$date)\nfirst_date &lt;- min(covid_data_tbl$date)\n\n# Get the latest total cases for the US\nUS_covid_data_tbl &lt;- covid_data_tbl %&gt;%\n  filter(location == \"United States\")\n\nus_last_record &lt;- US_covid_data_tbl %&gt;%\n  filter(date == max(date))\n\nus_last_case &lt;- us_last_record$total_cases\nus_last_date &lt;- us_last_record$date\n\n# Get the latest total cases for Germany\nGermany_covid_data_tbl &lt;- covid_data_tbl %&gt;%\n  filter(location == \"Germany\")\n\ngermany_last_record &lt;- Germany_covid_data_tbl %&gt;%\n  filter(date == max(date))\n\ngermany_last_case &lt;- germany_last_record$total_cases\ngermany_last_date &lt;- germany_last_record$date\n\n# Plot\nggplot(covid_data_tbl_selected, aes(x = date, y = total_cases, color = location)) +\n  geom_line(size = 1.2) +\n  geom_label_repel(data = data.frame(date = us_last_date, total_cases = us_last_case, location = \"United States\"),\n                   aes(x = date, y = total_cases, label = paste(\"USA:\", format(us_last_case, big.mark = \",\"))),\n                   fill = \"purple\", color = \"white\", nudge_y = 5000000, size = 3) +\n  geom_label_repel(data = data.frame(date = germany_last_date, total_cases = germany_last_case, location = \"Germany\"),\n                   aes(x = date, y = total_cases, label = paste(\"Germany:\", format(germany_last_case, big.mark = \",\"))),\n                   fill = \"blue\", color = \"white\", nudge_y = 2000000, size = 3) +\n  labs(\n    subtitle = \"As of 09/05/2024\",\n    title = \"COVID-19 confirmed cases worldwide\",\n    x = \"\", \n    y = \"Cumulative Cases\",\n    color = \"Country\"\n  ) +\n  theme(\n    plot.title = element_text(\n      color = \"white\",\n      size = 16,\n      face = \"bold\"\n    ),\n    plot.subtitle = element_text(\n      color = \"white\",\n      size = 12\n    ),\n    legend.position = \"bottom\",\n    legend.background = element_rect(\n      fill = \"#222222\",\n      color = \"#aaaaaa\"\n    ),\n    legend.text = element_text(\n      color = \"#aaaaaa\"\n    ),\n    legend.title = element_text(\n      color = \"#aaaaaa\",\n      hjust = 0.5,\n      vjust = 0.5\n    ),\n    axis.text.x = element_text(\n      angle = 45,\n      hjust = 1,\n      color = \"#aaaaaa\"\n    ),\n    axis.text.y = element_text(\n      color = \"#aaaaaa\"\n    ),\n    axis.title.y = element_text(\n      color = \"white\",\n      size = 13,\n      face = \"bold\"\n    ),\n    plot.background = element_rect(\n      fill = \"#222222\"\n    ),\n    panel.background = element_rect(\n      fill = \"#222222\"\n    ),\n    panel.grid = element_line(\n      color = \"#888888\"\n    ),\n    panel.grid.minor = element_blank(),\n    legend.key = element_rect(\n      fill = \"#222222\"\n    )\n  ) +\n  scale_x_date(date_breaks = \"1 month\", date_labels = \"%B '%y\") +\n  scale_y_continuous(breaks = c(0, 25000000, 50000000, 75000000),\n                     labels = c(\"0\", \"25M\", \"50M\", \"75M\")) +\n  scale_color_manual(values = c(\"Germany\" = \"red\", \n                                \"France\" = \"blue\", \n                                \"Spain\" = \"green\", \n                                \"United Kingdom\" = \"orange\", \n                                \"United States\" = \"purple\"),\n                     name = \"Country\",\n                     labels = c(\"Germany\", \"France\", \"Spain\", \"United Kingdom\", \"United States\")) +\n  guides(color = guide_legend(nrow = 2, byrow = TRUE))\n\n#&gt; Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#&gt; ℹ Please use `linewidth` instead.\n\n\n#&gt; Warning: Removed 84 rows containing missing values or values outside the scale range\n#&gt; (`geom_line()`)."
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html#world-case-fatality-rate",
    "href": "content/01_journal/04_data_visualization.html#world-case-fatality-rate",
    "title": "Data Visualization",
    "section": "\n3.1 World case-fatality rate",
    "text": "3.1 World case-fatality rate\n\nlibrary(tidyverse)\nlibrary(maps)\nlibrary(purrr)\n\nworld &lt;- map_data(\"world\")\ncovid_data_tbl &lt;- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n\n#&gt; Rows: 399276 Columns: 67\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr   (4): iso_code, continent, location, tests_units\n#&gt; dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#&gt; date  (1): date\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nlatest_date &lt;- covid_data_tbl$date %&gt;% max()\n\ncovid_data_tbl_plot &lt;- covid_data_tbl %&gt;%\n  select(location, total_cases, total_deaths, population) %&gt;%\n  drop_na() %&gt;%\n  group_by(location) %&gt;%\n  summarise(total_cases = last(total_cases), \n            total_deaths = last(total_deaths),\n            population = last(population),\n            mortality_rate = total_deaths / population,\n            case_fatality_rate = total_deaths / total_cases) \n\nworld_covid &lt;- covid_data_tbl_plot %&gt;%\n  mutate(location = case_when(\n    location == \"United Kingdom\" ~ \"UK\",\n    location == \"United States\" ~ \"USA\",\n    location == \"Democratic Republic of Congo\" ~ \"Democratic Republic of the Congo\",\n    TRUE ~ location\n  )) %&gt;%\n  right_join(world, c(\"location\" = \"region\")) \n\n# Visualize mortality rate\nggplot() +\n  geom_map(data = world_covid,\n           aes(x = long, y = lat, map_id = location, fill = mortality_rate),\n           col = \"white\",\n           map = world) +\n  scale_fill_gradient(low = \"#aa7776\", high = \"#8b0000\") +\n  theme(axis.title = element_blank(),\n        axis.text = element_blank(),\n        plot.background = element_rect(fill = \"#222222\"),\n        panel.background = element_rect(fill = \"#222222\"),\n        legend.background = element_rect(fill = \"#222222\", color = \"#aaaaaa\"),\n        legend.text = element_text(color = \"#aaaaaa\"),\n        legend.title = element_text(color = \"#aaaaaa\", hjust = 0.5, vjust = 0.5))\n\n#&gt; Warning in geom_map(data = world_covid, aes(x = long, y = lat, map_id =\n#&gt; location, : Ignoring unknown aesthetics: x and y\n\n\n\n\n\n\n\n# Visualize case-fatality rate\nggplot() +\n  geom_map(data = world_covid,\n           aes(x = long, y = lat, map_id = location, fill = case_fatality_rate),\n           col = \"white\",\n           map = world) +\n  scale_fill_gradient(low = \"#aa7776\", high = \"#8b0000\") +\n  theme(axis.title = element_blank(),\n        axis.text = element_blank(),\n        plot.background = element_rect(fill = \"#222222\"),\n        panel.background = element_rect(fill = \"#222222\"),\n        legend.background = element_rect(fill = \"#222222\", color = \"#aaaaaa\"),\n        legend.text = element_text(color = \"#aaaaaa\"),\n        legend.title = element_text(color = \"#aaaaaa\", hjust = 0.5, vjust = 0.5))\n\n#&gt; Warning in geom_map(data = world_covid, aes(x = long, y = lat, map_id =\n#&gt; location, : Ignoring unknown aesthetics: x and y"
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Last compiled: 2024-05-18\nI had to use the reduced data, because my computer could not load the original patent data."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#patent-dominance",
    "href": "content/01_journal/03_data_wrangling.html#patent-dominance",
    "title": "Data Wrangling",
    "section": "\n2.1 Patent Dominance",
    "text": "2.1 Patent Dominance\n\n# 01 Load libraries ----\n\nlibrary(vroom)\nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#&gt; ✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#&gt; ✔ purrr     1.0.2     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ readr::col_character()   masks vroom::col_character()\n#&gt; ✖ readr::col_date()        masks vroom::col_date()\n#&gt; ✖ readr::col_datetime()    masks vroom::col_datetime()\n#&gt; ✖ readr::col_double()      masks vroom::col_double()\n#&gt; ✖ readr::col_factor()      masks vroom::col_factor()\n#&gt; ✖ readr::col_guess()       masks vroom::col_guess()\n#&gt; ✖ readr::col_integer()     masks vroom::col_integer()\n#&gt; ✖ readr::col_logical()     masks vroom::col_logical()\n#&gt; ✖ readr::col_number()      masks vroom::col_number()\n#&gt; ✖ readr::col_skip()        masks vroom::col_skip()\n#&gt; ✖ readr::col_time()        masks vroom::col_time()\n#&gt; ✖ readr::cols()            masks vroom::cols()\n#&gt; ✖ readr::date_names_lang() masks vroom::date_names_lang()\n#&gt; ✖ readr::default_locale()  masks vroom::default_locale()\n#&gt; ✖ dplyr::filter()          masks stats::filter()\n#&gt; ✖ readr::fwf_cols()        masks vroom::fwf_cols()\n#&gt; ✖ readr::fwf_empty()       masks vroom::fwf_empty()\n#&gt; ✖ readr::fwf_positions()   masks vroom::fwf_positions()\n#&gt; ✖ readr::fwf_widths()      masks vroom::fwf_widths()\n#&gt; ✖ dplyr::lag()             masks stats::lag()\n#&gt; ✖ readr::locale()          masks vroom::locale()\n#&gt; ✖ readr::output_column()   masks vroom::output_column()\n#&gt; ✖ readr::problems()        masks vroom::problems()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# 02 Wrangling Data ----\ncol_types &lt;- list(\n  id = col_character(),\n  date = col_date(\"%Y-%m-%d\"),\n  num_claims = col_double()\n)\n\npatent_tbl &lt;- vroom(\n  file       = \"Patent_data_reduced/patent.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\ncol_types &lt;- list(\n  id = col_character(),\n  type = col_character(),\n  organization = col_character()\n)\n\nassignee_tbl &lt;- vroom(\n  file       = \"Patent_data_reduced/assignee.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\ncol_types &lt;- list(\n  patent_id = col_character(),\n  assignee_id = col_character()\n)\n\npatent_assignee_tbl &lt;- vroom(\n  file       = \"Patent_data_reduced/patent_assignee.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\ncol_types &lt;- list(\n  patent_id = col_character(),\n  mainclass_id = col_character(),\n  sequence = col_integer()\n)\n\nuspc_tbl &lt;- vroom(\n  file       = \"Patent_data_reduced/uspc.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\nUS_top_10 &lt;- patent_assignee_tbl %&gt;%\n  group_by(assignee_id) %&gt;%\n  summarize(count = n()) %&gt;%\n  arrange(desc(count)) %&gt;%\n  left_join(assignee_tbl, c(\"assignee_id\" = \"id\"))\n\nChallange_1 &lt;- US_top_10$organization %&gt;%\n  head(n=50)\nChallange_1\n\n#&gt;  [1] \"International Business Machines Corporation\"          \n#&gt;  [2] \"Samsung Electronics Co., Ltd.\"                        \n#&gt;  [3] \"Canon Kabushiki Kaisha\"                               \n#&gt;  [4] \"Sony Corporation\"                                     \n#&gt;  [5] \"Microsoft Corporation\"                                \n#&gt;  [6] \"Google Inc.\"                                          \n#&gt;  [7] \"Kabushiki Kaisha Toshiba\"                             \n#&gt;  [8] \"QUALCOMM Incorporated\"                                \n#&gt;  [9] \"LG Electronics Inc.\"                                  \n#&gt; [10] \"Panasonic Corporation\"                                \n#&gt; [11] \"Apple Inc.\"                                           \n#&gt; [12] \"General Electric Company\"                             \n#&gt; [13] \"Fujitsu Limited\"                                      \n#&gt; [14] \"Seiko Epson Corporation\"                              \n#&gt; [15] \"Toyota Jidosha Kabushiki Kaisha\"                      \n#&gt; [16] \"Ricoh Company, Ltd.\"                                  \n#&gt; [17] \"Hewlett-Packard Development Company, L.P.\"            \n#&gt; [18] \"AT&T INTELLECTUAL PROPERTY I, L.P.\"                   \n#&gt; [19] \"Intel Corporation\"                                    \n#&gt; [20] \"Hon Hai Precision Industry Co., Ltd.\"                 \n#&gt; [21] \"Samsung Display Co., Ltd.\"                            \n#&gt; [22] \"Telefonaktiebolaget LM Ericsson (Publ)\"               \n#&gt; [23] \"GM Global Technology Operations LLC\"                  \n#&gt; [24] \"Taiwan Semiconductor Manufacturing Company, Ltd.\"     \n#&gt; [25] \"BlackBerry Limited\"                                   \n#&gt; [26] \"Honda Motor Co., Ltd.\"                                \n#&gt; [27] \"Broadcom Corporation\"                                 \n#&gt; [28] \"SEMICONDUCTOR ENERGY LABORATORY CO., LTD.\"            \n#&gt; [29] \"Robert Bosch GmbH\"                                    \n#&gt; [30] \"Brother Kogyo Kabushiki Kaisha\"                       \n#&gt; [31] \"Sharp Kabushiki Kaisha\"                               \n#&gt; [32] \"Cisco Technology, Inc.\"                               \n#&gt; [33] \"Siemens Aktiengesellschaft\"                           \n#&gt; [34] \"Hitachi, Ltd.\"                                        \n#&gt; [35] \"Micron Technology, Inc.\"                              \n#&gt; [36] \"FUJIFILM Corporation\"                                 \n#&gt; [37] \"NEC Corporation\"                                      \n#&gt; [38] \"Xerox Corporation\"                                    \n#&gt; [39] \"Koninklijke Philips Electronics N.V.\"                 \n#&gt; [40] \"The Boeing Company\"                                   \n#&gt; [41] \"Electronics and Telecommunications Research Institute\"\n#&gt; [42] \"Mitsubishi Electric Corporation\"                      \n#&gt; [43] \"Fuji Xerox Co., Ltd.\"                                 \n#&gt; [44] \"Texas Instruments Incorporated\"                       \n#&gt; [45] \"Denso Corporation\"                                    \n#&gt; [46] \"Ford Global Technologies, LLC\"                        \n#&gt; [47] \"Huawei Technologies Co., Ltd.\"                        \n#&gt; [48] \"Honeywell International Inc.\"                         \n#&gt; [49] \"Amazon Technologies, Inc.\"                            \n#&gt; [50] \"SK hynix Inc.\"\n\n\nTable 1: The 50 companies with the most patents(descending order)."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#recent-patent-activity-2014-aug",
    "href": "content/01_journal/03_data_wrangling.html#recent-patent-activity-2014-aug",
    "title": "Data Wrangling",
    "section": "\n3.1 Recent Patent Activity (2014 Aug)",
    "text": "3.1 Recent Patent Activity (2014 Aug)\n\nS_2014_05 &lt;- patent_tbl %&gt;%\n  filter(date &gt;= \"2014-05-01\" & date &lt; \"2014-06-01\") %&gt;%\n  left_join(patent_assignee_tbl, c(\"id\" = \"patent_id\")) %&gt;%\n  left_join(assignee_tbl, c(\"assignee_id\" = \"id\")) %&gt;%\n  drop_na() %&gt;%\n  group_by(organization) %&gt;%\n  summarize(count =n()) %&gt;%\n  arrange(desc(count))\n\nChallange_2 &lt;-S_2014_05$organization %&gt;%\n  head(n=10)\nChallange_2\n\n#&gt;  [1] \"International Business Machines Corporation\"\n#&gt;  [2] \"Samsung Electronics Co., Ltd.\"              \n#&gt;  [3] \"Canon Kabushiki Kaisha\"                     \n#&gt;  [4] \"Microsoft Corporation\"                      \n#&gt;  [5] \"Sony Corporation\"                           \n#&gt;  [6] \"Kabushiki Kaisha Toshiba\"                   \n#&gt;  [7] \"Panasonic Corporation\"                      \n#&gt;  [8] \"QUALCOMM Incorporated\"                      \n#&gt;  [9] \"Apple Inc.\"                                 \n#&gt; [10] \"Google Inc.\"\n\n\nTable 2: Top 10 US companies with the most new granted patents in 2014 Aug."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#innovation-in-tech",
    "href": "content/01_journal/03_data_wrangling.html#innovation-in-tech",
    "title": "Data Wrangling",
    "section": "\n4.1 Innovation in Tech",
    "text": "4.1 Innovation in Tech\n\nTop_mainclasses &lt;- uspc_tbl %&gt;%\n  inner_join(patent_assignee_tbl, c(\"patent_id\" = \"patent_id\")) %&gt;%\n  inner_join(assignee_tbl, c(\"assignee_id\"= \"id\")) %&gt;%\n  group_by(mainclass_id) %&gt;%\n  summarize(count = n()) %&gt;%\n  arrange(desc(count)) %&gt;%\n  head(n=5)\n\n#&gt; Warning in inner_join(., patent_assignee_tbl, c(patent_id = \"patent_id\")): Detected an unexpected many-to-many relationship between `x` and `y`.\n#&gt; ℹ Row 16 of `x` matches multiple rows in `y`.\n#&gt; ℹ Row 197969 of `y` matches multiple rows in `x`.\n#&gt; ℹ If a many-to-many relationship is expected, set `relationship =\n#&gt;   \"many-to-many\"` to silence this warning.\n\nChallange_3 &lt;- Top_mainclasses$mainclass_id %&gt;%\n  head(n=5)\nChallange_3\n\n#&gt; [1] \"257\" \"455\" \"370\" \"438\" \"709\"\n\n\nTable 3: Top 5 USPTO mainclasses for the worlds top ten companies.(descending order)"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "01 Tidyverse",
    "section": "",
    "text": "Last compiled: 2024-05-18\nThroughout the chapter, I gained proficiency in the fundamental aspects of the tidyverse library, encompassing essential skills in both data wrangling and data visualization."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#sales-by-state",
    "href": "content/01_journal/01_tidyverse.html#sales-by-state",
    "title": "01 Tidyverse",
    "section": "\n2.1 Sales by State",
    "text": "2.1 Sales by State\n\n# Data Science at TUHH ------------------------------------------------------\n# SALES ANALYSIS ----\n\n# 1.0 Load libraries ----\nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#&gt; ✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#&gt; ✔ purrr     1.0.2     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readxl)\n\n# 2.0 Importing Files ----\nbike_orderlines_wrangled_tbl &lt;- read_rds(\"01_tidyverse_files/bike_orderlines.rds\")\n\n# 3.0 Examining Data ----\n#bike_orderlines_wrangled_tbl %&gt;%\n#head(bike_orderlines_wrangled_tbl, n=7)\n\n# 4.0 Wrangling Data ----\nbike_orderlines_wrangled_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  separate(col = location,\n           into = c(\"city\", \"state\"),\n           sep = \", \")\n\n# 5.0 Business insight ----\n#5.1 Challenge No. 1 - Sales by State ----\n\n#Step 1 - Manipulate----\nsales_by_state &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  select(state, total_price) %&gt;%\n  group_by(state) %&gt;%\n  summarize(sales = sum(total_price))\nsales_by_state %&gt;% head(n=10)\n\n\n\n  \n\n\n#Step 2 - Visulaize----\nplot_1 &lt;- sales_by_state %&gt;%\n  ggplot(aes(x = state, y = sales),)+\n  geom_col(fill = \"blue\")+\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))+\n  labs(title = \"Sales By State\")+\n  labs(y = \"Sales\")+labs(x = \"States\")+\n  theme(plot.title = element_text(size = 34))+\n  theme(axis.title.x = element_text(size = 28))+\n  theme(axis.title.y = element_text(size = 28))+\n  theme(axis.text.y = element_text(size = 14))+\n  theme(axis.text.x = element_text(size = 14))+\n  theme(text = element_text(family = \"Times New Roman\"))+\n  theme(axis.title = element_text(face=\"bold\"))+\n  theme(axis.text = element_text(face=\"bold\"))+\n  theme(plot.title = element_text(face=\"bold\"))+\n  theme(axis.title.x=element_text(colour=\"black\"))+\n  theme(axis.title.y=element_text(colour=\"black\"))+\n  theme(axis.text.x=element_text(colour=\"black\"))+\n  theme(axis.text.y=element_text(colour=\"black\"))+\n  theme(plot.title=element_text(hjust=0.5))\n\nplot_1\n\n\n\n\n\n\nggsave(\"01_tidyverse_files/figure-html/sales_by_state.png\", height = 7 , width = 12)\n\nThe above figure illustrates that North Rhine-Westphalia has the highest revenue among all states."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#sales-by-state-by-year",
    "href": "content/01_journal/01_tidyverse.html#sales-by-state-by-year",
    "title": "01 Tidyverse",
    "section": "\n3.1 Sales by State by Year",
    "text": "3.1 Sales by State by Year\n\n# 5.2 Challenge No. 2 - sales by location and year (facet_wrap) ----\n\n#Step 1 - Manipulate----\nsales_by_state_by_year &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  select(state, total_price, order_date) %&gt;%\n  mutate(year = year(order_date)) %&gt;%\n  group_by(year) %&gt;%\n  summarize(sales = sum(total_price), state = state)\n\n#&gt; Warning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\n#&gt; dplyr 1.1.0.\n#&gt; ℹ Please use `reframe()` instead.\n#&gt; ℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n#&gt;   always returns an ungrouped data frame and adjust accordingly.\n\n\n#&gt; `summarise()` has grouped output by 'year'. You can override using the\n#&gt; `.groups` argument.\n\nsales_by_state_by_year %&gt;% head(n=5)\n\n\n\n  \n\n\n#Step 2 - Visulaize----\nplot_2 &lt;- sales_by_state_by_year %&gt;%\n  ggplot(aes(x = year, y = sales, fill = state)) +\n  facet_wrap(~state) +\n  geom_col(fill = \"chocolate2\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))+\n  labs(title = \"Sales By Location and Year\")+\n  labs(x = \"Year\")+\n  labs(y = \"Sales\")+\n  theme(plot.title = element_text(size = 34))+\n  theme(axis.title.x = element_text(size = 28))+\n  theme(axis.title.y = element_text(size = 28))+\n  theme(axis.text.y = element_text(size = 14))+\n  theme(axis.text.x = element_text(size = 14))+\n  theme(text = element_text(family = \"Times New Roman\"))+\n  theme(axis.title = element_text(face=\"bold\"))+\n  theme(axis.text = element_text(face=\"bold\"))+\n  theme(plot.title = element_text(face=\"bold\"))+\n  theme(axis.title.x=element_text(colour=\"black\"))+\n  theme(axis.title.y=element_text(colour=\"black\"))+\n  theme(axis.text.x=element_text(colour=\"black\"))+\n  theme(axis.text.y=element_text(colour=\"black\"))+\n  theme(plot.title=element_text(hjust=0.5))+\n  theme(strip.text = element_text(size = 6, color = \"black\"))+\n  theme(strip.text = element_text(face = \"bold\"))\nplot_2\n\n\n\n\n\n\nggsave(\"01_tidyverse_files/figure-html/Sales_by_State_und_Location.png\", height = 15 , width = 20)"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  }
]