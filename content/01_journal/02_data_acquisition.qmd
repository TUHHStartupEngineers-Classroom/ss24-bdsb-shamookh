---
title: "Data Acquistion"
author: "Muhammad Shamookh"
date: "2024-05"
output:
  html_document:
    toc: true
    toc_float: true
    df_print: paged
    collapsed: false
    number_sections: true
    toc_depth: 3
    code_folding: hide
---

# Data Acquisition

Last compiled: `r Sys.Date()`

# Challenge No. 01
The Spotify Web API provides access to various endpoints to retrieve data related to music tracks, artists, albums, playlists, and user profiles. The top 5 most popular tracks on Spotify are retreived.

## Spotify API
```{r}
# Load required libraries
library(httr)
library(jsonlite)
library(tidyverse)

# Replace with your actual OAuth token
token <- 'BQBcTINcgYgaqH7etCs9vm5X2nKxc2zADfqQbwAP2tnmljk7XthJfaaqKDw4rWFN6cspyISpo7JyQiGIvETRqZ-szLLhyOGp--e_gnzER5RthEDfjtNAUedH8Vf0F8YuEKXCE5wXmfzfXnrItCrxzZIR29-pGlbyPBZHrHsJq1LPAEkUemWZ95ABVoCYlGWTd10EqzocX8zAwcIhtWIrvVDHX4-3SRBMjO-O4QiBMF94f42TSPKp068At2-MuZ0c7SMvbWBaeO3g-0Wt8qT4rvSgPyyn'

# Function to make API request
fetch_web_api <- function(endpoint, method = "GET", body = NULL) {
  url <- paste0("https://api.spotify.com/", endpoint)
  
  res <- httr::VERB(
    method,
    url,
    add_headers(Authorization = paste("Bearer", token)),
    body = body,
    encode = "json"
  )
  
  if (status_code(res) == 200) {
    return(content(res, as = "parsed", type = "application/json"))
  } else {
    stop("API request failed with status code: ", status_code(res))
  }
}

# Function to get top tracks
get_top_tracks <- function() {
  endpoint <- "v1/me/top/tracks?time_range=long_term&limit=5"
  response <- fetch_web_api(endpoint)
  return(response$items)
}

# Get top tracks
top_tracks <- get_top_tracks()

# Process and print the data in a readable format
track_info <- top_tracks %>%
  map_df(~ data.frame(
    track_name = .x$name,
    artist_names = paste(map_chr(.x$artists, "name"), collapse = ", "),
    stringsAsFactors = FALSE
  ))

print(track_info)

# Display as a table
library(knitr)
kable(track_info, format = "markdown")



```
 1: Top 5 track and singer names.


# Challenge No. 02
Web scraping is a technique used to extract data from websites. In this example, we will scrape the mountain bikes listed on the Rose Bikes website <https://www.rosebikes.com/bikes/mtb>. The goal is to extract information such as the bike name, price, and other relevant details.

## Rosebike

```{r}
library(tidyverse) # Main Package - Loads dplyr, purrr, etc.
library(rvest)     # HTML Hacking & Web Scraping
library(xopen)     # Quickly opening URLs
library(jsonlite)  # converts JSON files to R objects
library(glue)      # concatenate strings
library(stringi)   # character string/text processing
library(purrr)

extract_price <- function(text) {
  price_str <- str_extract(text, "[0-9]*,*[0-9]*\\.[0-9]*")
  price_str <- gsub(",", "", as.character(price_str))
  return(price_str)
}

make_url <- function(my_string){
  base_url <- "https://www.rosebikes.com"
  glue("{base_url}{my_string}")
}

#all model names have numbers in them
filter_model_names <- function(model_name) {
  condition1 <- str_detect(model_name, "[0-9]")
  condition2 <- str_detect(model_name, "SOUL FIRE")
  if (condition1 | condition2) {
    return(model_name)
  }
  return(NULL)
}

extract_models <- function(model_url) {
  
  css_class_model_name <- ".basic-headline__title"
  # This part extracts the model names
  html_model_names <- read_html(model_url) %>%
    html_nodes(css = css_class_model_name) %>%
    map(html_text) %>%
    map(filter_model_names)
  model_names <- unique(unlist(html_model_names))
  
  
  #This parts extracts the model price
  css_class_model_price = ".catalog-category-model__price-current-value"
  model_prices <- read_html(model_url) %>%
    html_nodes(css = css_class_model_price) %>%
    map(html_text) %>%
    map(extract_price)
  
  #The last prices are the prices of the models
  while (length(model_prices) > length(model_names)) {
    model_prices[1] <- NULL
  }
  model_prices <- model_prices %>%
    unlist() %>%
    as.double()
  
  models_tbl <- tibble(model_names, model_prices)
  
}


extract_models_from_category_list_mtb <- function(bike_url){
  
  bike_price_xml_path = "catalog-category-bikes__price-title"
  category <- str_extract(bike_url, "(?<=/)[a-z]*$")
  css_class <- ".catalog-category-bikes__button"
  
  html_bike <- read_html(bike_url)
  
  html_models_urls <- html_bike %>%
    html_nodes(css = css_class) %>%
    html_attr("href") %>%
    map(make_url)
  
  models_in_category_list <- map(html_models_urls, extract_models)
  models_in_category_list
  models_in_category_tbl <- models_in_category_list[[1]]
  for (i in 2:length(models_in_category_list)) {
    models_in_category_tbl <- add_row(models_in_category_tbl, 
                                      model_names = models_in_category_list[[i]]$model_names,
                                      model_prices = models_in_category_list[[i]]$model_prices)
  }
  
  category = rep(category, times = length(models_in_category_tbl$model_names))
  models_in_category_tbl$category <- category
  return(models_in_category_tbl)
}



home_url <- "https://www.rosebikes.com/bikes"

html_home <- read_html(home_url)
html_categories_urls <- html_home %>%
  html_nodes(css = ".catalog-navigation__link") %>%
  html_attr("href") %>%
  map(make_url)


tbl <- html_categories_urls[[1]] %>%
  extract_models_from_category_list_mtb
tbl 
```
Table 2: Model names and Model prices (Prices are in Euro)









